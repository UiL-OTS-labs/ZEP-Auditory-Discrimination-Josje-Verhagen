/******************************************************************************\
FILE:           discr_ax.zp
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Same-Different Auditory Discrimination (AX)

For more information on the discr_ax task see readme.txt in the
test folder.


Global structure of experiment:

  - welcome

  - phase 1 (see subfolder test)

  - thankyou


HISTORY:
2013-07-03 TV   Created.
2017-01-11 CvR   Adjusted.

\******************************************************************************/

requires 1.12;

import std_windows1;
import std_texts_nl;
import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;

import test::task;


Experiment experiment
{
    on_event:entry()
    {
        show_test_windows();

        // Enable the button_box
		if(open_button_box() != OK)
		{
			println("Could not open button box!");
			terminate;
		}

        if(check_participant_fields() != OK)
		{
			println("Missing counterbalance order participant setting!");
			terminate;
		}

        // Load the stimuli
        if (test::load_stimuli(test::test_items, string(selected_group)+".csv") != OK) terminate;

        // 'counterbalanced lijsten voor wat betreft volgorde van strings binnen trial'
        if(expdb.participant.get_enum_field("Counterbalance_order_yes_no") == "yes" )
        {
            test::swap_item_order();
        }

        // Randomize test items table.
        if (test::shuffle_test_items() != OK) terminate;
    }

    int open_button_box()
	{
		int index = 0;
		while(index < BEEXY_BOX_PORT_ADDRESS_CANDIDATES.size)
		{
			string address = BEEXY_BOX_PORT_ADDRESS_CANDIDATES[index];
			control.button_box.open(address);
			if(control.button_box.is_open)
			{
				println("Managed to open button box on " + address);
				return OK;
			}
			index = index + 1;
		}

		return ERROR;
	}

    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }


    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }


    Part phase1
    {
        on_event:entry()
        {
            test::action(this);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
