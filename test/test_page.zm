/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-01-30 TV   Created.
2017-01-11 CvR   Adjusted.

\******************************************************************************/

import std_sound_output_device;


Page test_page
{
    TestItem    item;           // trial control parameters


    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    on_event:key_press()
    {
        // Handle left-shift (same) and right-shift (diff).
        if (input_key == KEY_Shift_L)
            response.process_hit(1, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(2, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        CanvasGadget button_box_representation
        {
            init()
            {
                size = 450, 450;
                offset_x = width / 2;
                offset_y = height / 2;
                //is_visible = true;
            }

            ImageShape unpressed
            {
                init()
                {
                    // Always visible, the rest of the figures are on top.
                    is_visible = true;

                    image = stimuli_dir() + "images/three_button_beexy_box_unpressed.svg";

                    // Center image
                    offset_x = -(image_width / 2);
                    offset_y = -(image_height / 2);
                }
            }

            ImageShape left
            {
                init()
                {
                    // Always visible, the rest of the figures are on top.
                    is_visible = false;

                    image = stimuli_dir() + "images/three_button_beexy_box_top_left_pressed.svg";

                    // Center image
                    offset_x = -(image_width / 2);
                    offset_y = -(image_height / 2);
                }

                on_event:start()
                {
                    control.button_box.output_led(1);
                }

                on_event:finish()
                {
                    control.button_box.output_led(0);
                }
            }

            ImageShape right
            {
                init()
                {
                    // Always visible, the rest of the figures are on top.
                    is_visible = false;

                    image = stimuli_dir() + "images/three_button_beexy_box_top_right_pressed.svg";

                    // Center image
                    offset_x = -(image_width / 2);
                    offset_y = -(image_height / 2);
                }

                on_event:start()
                {
                    control.button_box.output_led(4);
                }

                on_event:finish()
                {
                    control.button_box.output_led(0);
                }
            }

            ImageShape middle
            {
                init()
                {
                    is_visible = false;

                    image = stimuli_dir() + "images/three_button_beexy_box_bottom_pressed.svg";

                    // Center image
                    offset_x = -(image_width / 2);
                    offset_y = -(image_height / 2);
                }

                on_event:start()
                {
                    control.button_box.output_led(2);
                }

                on_event:finish()
                {
                    control.button_box.output_led(0);
                }
            }
        }

        void reset()
        {
            full_abort();
            control.button_box.output_led(0);
        }

    }


    SoundChain stimulus1
    {
        // Sound source/producer object.
        SoundSequence seq
        {
            SoundFile clip1 {}
            SoundFile clip2 {}
            SoundFile clip3 {}
        }


        // Sound sink/consumer object.
        SoundPlayback playback {}

        on_event:start()
        {
            layout.button_box_representation.left.start(now());
        }

        on_event:finish()
        {
            layout.button_box_representation.left.stop(now());
            stimulus2.play(event_time+INTRATRIPLET_INTERVAL);
        }

        time play(time t)
        {
            abort();
            stimulus2.abort();

            playback.device = sound_output_device;
            seq.clip1.file = stimuli_dir() + "sounds/" + item.sndfn1_1;
            seq.clip2.file = stimuli_dir() + "sounds/" + item.sndfn2_1;
            seq.clip3.file = stimuli_dir() + "sounds/" + item.sndfn3_1;

            // set time WITHIN triplets
            seq.clip1.trailer_duration = INTERTRIPLET_INTERVAL;
            seq.clip2.trailer_duration = INTERTRIPLET_INTERVAL;

            start(t);

            return expected_finish_time;
        }
    }

    SoundChain stimulus2
    {
        // Sound source/producer object.
        SoundSequence seq
        {
            SoundFile clip1 {}
            SoundFile clip2 {}
            SoundFile clip3 {}
        }

        // Sound sink/consumer object.
        SoundPlayback playback {}

        on_event:start()
        {
            layout.button_box_representation.right.start(now());
        }

        on_event:finish()
        {
            layout.button_box_representation.right.stop(now());

            // Response interval starts at stimulus offset.
            response.start(event_time, RESPONSE_DURATION);
        }

        time play(time t)
        {
            abort();
            stimulus1.abort();

            playback.device = sound_output_device;
            seq.clip1.file = stimuli_dir() + "sounds/" + item.sndfn1_2;
            seq.clip2.file = stimuli_dir() + "sounds/" + item.sndfn2_2;
            seq.clip3.file = stimuli_dir() + "sounds/" + item.sndfn3_2;

            // set time WITHIN triplets
            seq.clip1.trailer_duration = INTERTRIPLET_INTERVAL;
            seq.clip2.trailer_duration = INTERTRIPLET_INTERVAL;

            start(t);

            return expected_finish_time;
        }
    }

    Response response
    {
        // Response data.
        int     answer;          // response value: 0=same, 1=diff, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            answer = -9999;
            rt = -9999;
            correct = -9999;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                answer = val;

                if(answer == item.expected_answer )
                    correct = 1;
                else
                    correct = 0;

                rt = int(reaction_time(0));

                ignore_remaining_hits();

                if(val == 1 )
                {
                    layout.button_box_representation.left.start(t, FEEDBACK_DURATION);
                    stop(layout.button_box_representation.left.expected_finish_time);
                }
                else
                {
                    layout.button_box_representation.right.start(t, FEEDBACK_DURATION);
                    stop(layout.button_box_representation.right.expected_finish_time);
                }

            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness,
                    FEEDBACK_DURATION))
                done(CONTINUE);
        }


        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();
        stimulus1.abort();
        stimulus2.abort();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
            "did you hear <i>same</i> or <i>different</i> sounds" : "",
            true);

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. same(0) and diff(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 1); // button 0 means same(0)
        control.button_box.enable_button(2, 2); // button 1 means diff(1)
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.button_box.disable_buttons();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;


        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Reset response data.
        response.clear();


        // Start stimulus at fixation offset.
        time stim1offset = stimulus1.play(tref);

        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " +
            string(item.sndfn1_1) + "  " +
            string(item.sndfn2_1) + "  " +
            string(item.sndfn3_1) + "  " +
            string(item.sndfn1_2) + "  " +
            string(item.sndfn2_2) + "  " +
            string(item.sndfn3_2));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
