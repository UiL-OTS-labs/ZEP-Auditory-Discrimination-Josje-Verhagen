/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Same-Different Auditory Discrimination (AX)
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

//requires 1.12;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
        control.button_box.open("/dev/ttyACM0");

        // If necessary set parallel port line D0 to power button box device.
//
    }


    Part instructions
    {
        on_event:entry()
        {
//            pause_page.set_text_size(1000, 600);
            pause_page.set_text(
"Je hoort zometeen steeds twee zinnetjes uit de gekke taal die je net hebt gehoord. Jij mag steeds"
"beslissen welk zinnetje beter past bij de taal die je hebt gehoord. Als je het eerste zinnetje beter bij de"
"taal vindt passen, druk je op deze knop [wijs knop aan]. Als je het tweede zinnetje beter bij de taal vindt"
"passen, druk je op die knop [wijs knop aan].\n\n"
"Ja, snap je het?\n\n"
"\tDus: op welke knop moet je drukken als je het eerste zinnetje beter vindt passen?\n\n"
"\t En op welke knop moet je drukken als je het tweede zinnetje beter vindt passen?"
"Jij snapt het!\n\n"
"Ben je er klaar voor? Daar komt â€˜ie:"
,
                true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, feedback and prompt
            // disabled.
            test_page.setup(num_cycles, false, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type1 = item.type1;
                output.type2 = item.type2;
                output.sndfn1 = item.sndfn1;
                output.sndfn2 = item.sndfn2;
                output.value = test_page.response.value;
                output.rt = test_page.response.rt;
                output.correct = test_page.response.correct;
                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
